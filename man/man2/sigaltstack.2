.\" Copyright (c) 1983, 1991, 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)sigaltstack.2	8.2.1 (2.11BSD) 1997/9/3
.\"
.TH SIGALTSTACK 2 "September 3, 1997"
.UC 7
.SH NAME
\fBsigaltstack\fP \- set and/or get signal stack context
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <signal.h>
.sp
.nf
struct sigaltstack {
	caddr_t ss_base;
	int	ss_size;
	int     ss_flags;
};
.fi
.sp
.I int
.br
\fBsigaltstack\fP(ss, oss)
.br
.I struct sigaltstack *ss;
.br
.I struct sigaltstack *oss;
.SH DESCRIPTION
.B Sigaltstack
allows users to define an alternate stack on which signals
are to be processed.
If
.I ss
is non-zero,
it specifies a pointer to and the size of a
.I "signal stack"
on which to deliver signals,
and tells the system if the process is currently executing
on that stack.
When a signal's action indicates its handler
should execute on the signal stack (specified with a
.BR sigaction (2)
call), the system checks to see
if the process is currently executing on that stack.
If the process is not currently executing on the signal stack,
the system arranges a switch to the signal stack for the
duration of the signal handler's execution. 
.PP
If
SA_DISABLE
is set in
.IR ss_flags ,
.IR ss_base
and
.IR ss_size
are ignored and the signal stack will be disabled.
Trying to disable an active stack will cause
.B sigaltstack
to return -1 with
.I errno
set to
EINVAL.
A disabled stack will cause all signals to be
taken on the regular user stack.
If the stack is later re-enabled then all signals that were specified
to be processed on an alternate stack will resume doing so.
.PP
If
.I oss
is non-zero, the current signal stack state is returned.
The
.I ss_flags
field will contain the value
SA_ONSTACK
if the process is currently on a signal stack and
SA_DISABLE
if the signal stack is currently disabled.
.SH NOTES
The value
SIGSTKSZ
is defined to be the number of bytes/chars that would be used to cover
the usual case when allocating an alternate stack area.
The following code fragment is typically used to allocate an alternate stack.
.sp
.nf
if ((sigstk.ss_base = malloc(SIGSTKSZ)) == NULL)
	/* error return */
sigstk.ss_size = SIGSTKSZ;
sigstk.ss_flags = 0;
if (sigaltstack(&sigstk,0) < 0)
	perror("sigaltstack");
.fi
.sp
An alternative approach is provided for programs with signal handlers
that require a specific amount of stack space other than the default size.
The value
MINSIGSTKSZ
is defined to be the number of bytes/chars that is required by
the operating system to implement the alternate stack feature.
In computing an alternate stack size,
programs should add
MINSIGSTKSZ
to their stack requirements to allow for the operating system overhead.
.PP
Signal stacks are automatically adjusted for the direction of stack
growth and alignment requirements.
Signal stacks may or may not be protected by the hardware and
are not ``grown'' automatically as is done for the normal stack.
If the stack overflows and this space is not protected
unpredictable results may occur.
.SH RETURN VALUES
Upon successful completion, a value of 0 is returned.
Otherwise, a value of -1 is returned and 
.I errno
is set to indicate the error.
.SH ERRORS
.B Sigaltstack
will fail and the signal stack context will remain unchanged
if one of the following occurs.
.TP 20
EFAULT
Either
.I ss
or
.I oss
points to memory that is not a valid part of the process
address space.
.TP 20
EINVAL
An attempt was made to disable an active stack.
.TP 20
ENOMEM
Size of alternate stack area is less than or equal to
MINSIGSTKSZ .
.SH SEE ALSO
sigaction(2), setjmp(3)
.SH HISTORY
The predecessor to
.BR sigaltstack ,
the
.B sigstack
system call, appeared in 4.2BSD.
