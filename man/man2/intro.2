.\" Copyright (c) 1980,1983,1986 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)intro.2	6.7 (Berkeley) 5/23/86
.\"
.TH INTRO 2 "May 23, 1986"
.UC 4
.de en
.HP
\\$1  \\$2  \\$3
.br
..
.SH NAME
intro \- introduction to system calls and error numbers
.SH SYNOPSIS
.B #include <sys/errno.h>
.SH DESCRIPTION
This section describes all of the system calls.  Most
of these calls have one or more error returns.
An error condition is indicated by an otherwise impossible return
value.  This is almost always \-1; the individual descriptions
specify the details.
Note that a number of system calls overload the meanings of these
error numbers, and that the meanings must be interpreted according
to the type and circumstances of the call.
.PP
As with normal arguments, all return codes and values from
functions are of type integer unless otherwise noted.
An error number is also made available in the external
variable \fIerrno\fP, which is not cleared
on successful calls.
Thus \fIerrno\fP should be tested only after an error has occurred.
.PP
The following is a complete list of the errors and their
names as given in
.RI < sys/errno.h >.
.en 0 \h'\w'EIO'u' "Error 0
Unused.
.en 1 EPERM "Not owner
Typically this error indicates
an attempt to modify a file in some way forbidden
except to its owner or super-user.
It is also returned for attempts
by ordinary users to do things
allowed only to the super-user.
.en 2 ENOENT "No such file or directory
This error occurs when a file name is specified
and the file should exist but doesn't, or when one
of the directories in a path name does not exist.
.en 3 ESRCH "No such process
The process or process group whose number was given
does not exist, or any such process is already dead.
.en 4 EINTR "Interrupted system call
An asynchronous signal (such as interrupt or quit)
that the user has elected to catch
occurred during a system call.
If execution is resumed
after processing the signal
and the system call is not restarted,
it will appear as if the interrupted system call
returned this error condition.
.en 5 EIO "I/O error
Some physical I/O error occurred during a
.I read
or
.IR write .
This error may in some cases occur
on a call following the one to which it actually applies.
.en 6 ENXIO "No such device or address
I/O on a special file refers to a subdevice that does not
exist,
or beyond the limits of the device.
It may also occur when, for example, an illegal tape drive
unit number is selected 
or a disk pack is not loaded on a drive.
.en 7 E2BIG "Arg list too long
An argument list longer than 20480 bytes (or the current limit, NCARGS in
.IR <sys/param.h> )
is presented to
.IR execve .
.en 8 ENOEXEC "Exec format error
A request is made to execute a file
that, although it has the appropriate permissions,
does not start with a valid magic number, (see
.IR a.out (5)).
.en 9 EBADF "Bad file number
Either a file descriptor refers to no
open file,
or a read (resp. write) request is made to
a file that is open only for writing (resp. reading).
.en 10 ECHILD "No children
.I Wait
and the process has no
living or unwaited-for children.
.en 11 EAGAIN "No more processes
In a
.I fork,
the system's process table is full
or the user is not allowed to create any more
processes.
.en 12 ENOMEM "Not enough memory
During an
.I execve
or
.I break,
a program asks for more core or swap space than the system is
able to supply,
or a process size limit would be exceeded.
A lack of swap space is normally a temporary condition; however,
a lack of core
is not a temporary condition; the maximum size
of the text, data, and stack segments is a system parameter.
Soft limits may be increased to their corresponding hard limits.
.en 13 EACCES "Permission denied
An attempt was made to access a file in a way forbidden
by the protection system.
.en 14 EFAULT "Bad address
The system encountered a hardware fault in attempting to
access the arguments of a system call.
.en 15 ENOTBLK "Block device required
A plain file was mentioned where a block device was required,
e.g., in
.IR mount .
.en 16 EBUSY "Device busy
An attempt to mount a device that was already mounted or
an attempt was made to dismount a device
on which there is an active file
(open file, current directory, mounted-on file, or active text segment).
A request was made to an exclusive access device that was already in use.
.en 17 EEXIST "File exists
An existing file was mentioned in an inappropriate context,
e.g.,
.IR link .
.en 18 EXDEV "Cross-device link
A hard link to a file on another device
was attempted.
.en 19 ENODEV "No such device
An attempt was made to apply an inappropriate
system call to a device,
e.g., to read a write-only device,
or the device is not configured by the system.
.en 20 ENOTDIR "Not a directory
A non-directory was specified where a directory
is required,
for example, in a path name or
as an argument to
.IR chdir .
.en 21 EISDIR "Is a directory
An attempt to write on a directory.
.en 22 EINVAL "Invalid argument
Some invalid argument:
dismounting a non-mounted
device,
mentioning an unknown signal in
.I signal,
or some other argument inappropriate for the call.
Also set by math functions, (see 
.IR math (3)).
.en 23 ENFILE "File table overflow
The system's table of open files is full,
and temporarily no more
.I opens
can be accepted.
.en 24 EMFILE "Too many open files
As released, the limit on the number of
open files per process is 64.
.IR Getdtablesize (2)
will obtain the current limit.
Customary configuration limit on most other UNIX systems
is 20 per process.
.en 25 ENOTTY "Inappropriate ioctl for device
The file mentioned in an
.I ioctl
is not a terminal or one of the
devices to which this call applies.
.en 26 ETXTBSY "Text file busy
An attempt to execute a pure-procedure
program that is currently open for writing.
Also an attempt to open for writing a pure-procedure
program that is being executed.
.en 27 EFBIG "File too large
The size of a file exceeded the maximum (about
.if t 2\u\s-231\s+2\d
.if n 2.1E9
bytes).
.en 28 ENOSPC "No space left on device
A
.I write
to an ordinary file, the creation of a
directory or symbolic link, or the creation of a directory
entry failed because no more disk blocks are available
on the file system, or the allocation of an inode for a newly
created file failed because no more inodes are available
on the file system.
.en 29 ESPIPE "Illegal seek
An
.I lseek
was issued to a socket or pipe.
This error may also be issued for
other non-seekable devices.
.en 30 EROFS "Read-only file system
An attempt to modify a file or directory
was made
on a device mounted read-only.
.en 31 EMLINK "Too many links
An attempt to make more than 32767 hard links to a file.
.en 32 EPIPE "Broken pipe
A write on a pipe or socket for which there is no process
to read the data.
This condition normally generates a signal;
the error is returned if the signal is caught or ignored.
.en 33 EDOM "Argument too large
The argument of a function in the math package (3M)
is out of the domain of the function.
.en 34 ERANGE "Result too large
The value of a function in the math package (3M)
is unrepresentable within machine precision.
.en 35 EWOULDBLOCK "Operation would block"
An operation that would cause a process to block was attempted
on an object in non-blocking mode (see \fIfcntl\fP(2)).
.en 36 EINPROGRESS "Operation now in progress"
An operation that takes a long time to complete (such as
a \fIconnect\fP(2)) was attempted on a non-blocking object (see
\fIfcntl\fP(2)).
.en 37 EALREADY "Operation already in progress"
An operation was attempted on a non-blocking object that already
had an operation in progress.
.en 38 ENOTSOCK "Socket operation on non-socket"
Self-explanatory.
.en 39 EDESTADDRREQ "Destination address required"
A required address was omitted from an operation on a socket.
.en 40 EMSGSIZE "Message too long"
A message sent on a socket was larger than the internal message buffer
or some other network limit.
.en 41 EPROTOTYPE "Protocol wrong type for socket"
A protocol was specified that does not support the semantics of the
socket type requested. For example, you cannot use the ARPA Internet
UDP protocol with type SOCK_STREAM.
.en 42 ENOPROTOOPT "Option not supported by protocol 
A bad option or level was specified in a
.IR getsockopt (2)
or
.IR setsockopt (2)
call.
.en 43 EPROTONOSUPPORT "Protocol not supported"
The protocol has not been configured into the
system or no implementation for it exists.
.en 44 ESOCKTNOSUPPORT "Socket type not supported"
The support for the socket type has not been configured into the
system or no implementation for it exists.
.en 45 EOPNOTSUPP "Operation not supported on socket"
For example, trying to \fIaccept\fP a connection on a datagram socket.
.en 46 EPFNOSUPPORT "Protocol family not supported"
The protocol family has not been configured into the
system or no implementation for it exists.
.en 47 EAFNOSUPPORT "Address family not supported by protocol family"
An address incompatible with the requested protocol was used.
For example, you shouldn't necessarily expect to be able to use NS
addresses with ARPA Internet protocols.
.en 48 EADDRINUSE "Address already in use"
Only one usage of each address is normally permitted.
.en 49 EADDRNOTAVAIL "Can't assign requested address"
Normally results from an attempt to create a socket with an
address not on this machine.
.en 50 ENETDOWN "Network is down"
A socket operation encountered a dead network.
.en 51 ENETUNREACH "Network is unreachable"
A socket operation was attempted to an unreachable network.
.en 52 ENETRESET "Network dropped connection on reset"
The host you were connected to crashed and rebooted.
.en 53 ECONNABORTED "Software caused connection abort"
A connection abort was caused internal to your host machine.
.en 54 ECONNRESET "Connection reset by peer"
A connection was forcibly closed by a peer.  This normally
results from a loss of the connection on the remote socket
due to a timeout or a reboot.
.en 55 ENOBUFS "No buffer space available"
An operation on a socket or pipe was not performed because
the system lacked sufficient buffer space or because a queue was full.
.en 56 EISCONN "Socket is already connected"
A
.I connect
request was made on an already connected socket; or,
a
.I sendto
or
.I sendmsg
request on a connected socket specified a destination
when already connected.
.en 57 ENOTCONN "Socket is not connected"
An request to send or receive data was disallowed because
the socket is not connected and (when sending on a  datagram socket)
no address was supplied.
.en 58 ESHUTDOWN "Can't send after socket shutdown"
A request to send data was disallowed because the socket
had already been shut down with a previous
.IR shutdown (2)
call.
.en 59 \fIunused\fP
.en 60 ETIMEDOUT "Connection timed out"
A
.I connect
or
.I send
request failed because the connected party did not
properly respond after a period of time.  (The timeout
period is dependent on the communication protocol.)
.en 61 ECONNREFUSED "Connection refused"
No connection could be made because the target machine actively
refused it.  This usually results from trying to connect
to a service that is inactive on the foreign host.
.en 62 ELOOP "Too many levels of symbolic links"
A path name lookup involved more than 8 symbolic links.
.en 63 ENAMETOOLONG "File name too long"
A component of a path name exceeded 255 (MAXNAMELEN) characters, or an entire
path name exceeded 1023 (MAXPATHLEN-1) characters.
.en 64 EHOSTDOWN "Host is down"
A socket operation failed because the destination host was down.
.en 65 EHOSTUNREACH "Host is unreachable"
A socket operation was attempted to an unreachable host.
.en 66 ENOTEMPTY "Directory not empty"
A directory with entries other than \*(lq.\*(rq and \*(lq..\*(rq
was supplied to a remove directory or rename call.
...en 67 EPROCLIM "Too many processes"
...en 68 EUSERS "Too many users"
.en 69 EDQUOT "Disc quota exceeded"
A 
.I write
to an ordinary file, the creation of a
directory or symbolic link, or the creation of a directory
entry failed because the user's quota of disk blocks was
exhausted, or the allocation of an inode for a newly
created file failed because the user's quota of inodes
was exhausted.
.SH DEFINITIONS
.TP 5
Process ID
.br
Each active process in the system is uniquely identified by a positive
integer called a process ID.  The range of this ID is from 0 to 30000.
.TP 5
Parent process ID
.br
A new process is created by a currently active process; (see
.IR fork (2)).
The parent process ID of a process is the process ID of its creator.
.TP 5
Process Group ID
.br
Each active process is a member of a process group that is identified by
a positive integer called the process group ID.  This is the process
ID of the group leader.  This grouping permits the signaling of related
processes (see
.IR killpg (2))
and the job control mechanisms of
.IR csh (1).
.TP 5
Tty Group ID
.br
Each active process can be a member of a terminal group that is identified
by a positive integer called the tty group ID.  This grouping is used
to arbitrate between multiple jobs contending for the same terminal;
(see
.IR csh (1)
and
.IR tty (4)).
.TP 5
Real User ID and Real Group ID
.br
Each user on the system is identified by a positive integer
termed the real user ID.
.IP
Each user is also a member of one or more groups. 
One of these groups is distinguished from others and
used in implementing accounting facilities.  The positive
integer corresponding to this distinguished group is termed 
the real group ID.
.IP
All processes have a real user ID and real group ID.
These are initialized from the equivalent attributes
of the process that created it.
.TP 5
Effective User Id, Effective Group Id, and Access Groups
.br
Access to system resources is governed by three values:
the effective user ID, the effective group ID, and the
group access list.
.IP
The effective user ID and effective group ID are initially the
process's real user ID and real group ID respectively.  Either
may be modified through execution of a set-user-ID or set-group-ID
file (possibly by one its ancestors) (see
.IR execve (2)).
.IP
The group access list is an additional set of group ID's
used only in determining resource accessibility.  Access checks
are performed as described below in ``File Access Permissions''.
.TP 5
Super-user
.br
A process is recognized as a
.I super-user
process and is granted special privileges if its effective user ID is 0.
.TP 5
Special Processes
.br
The processes with a process ID's of 0, 1, and 2 are special.
Process 0 is the scheduler.  Process 1 is the initialization process
.IR init ,
and is the ancestor of every other process in the system.
It is used to control the process structure.
Process 2 is the paging daemon.
.TP 5
Descriptor
.br
An integer assigned by the system when a file is referenced
by
.IR open (2)
or
.IR dup (2),
or when a socket is created by
.IR pipe (2),
.IR socket (2)
or
.IR socketpair (2),
which uniquely identifies an access path to that file or socket from
a given process or any of its children.
.TP 5
File Name
.br
Names consisting of up to 255 (MAXNAMELEN) characters may be used to name
an ordinary file, special file, or directory.
.IP
These characters may be selected from the set of all ASCII character
excluding 0 (null) and the ASCII code for / (slash).  (The parity bit,
bit 8, must be 0.)
.IP
Note that it is generally unwise to use *, ?, [ or ] as part of
file names because of the special meaning attached to these characters
by the shell.
.TP 5
Path Name
.br
A path name is a null-terminated character string starting with an
optional slash (/), followed by zero or more directory names separated
by slashes, optionally followed by a file name.
The total length of a path name must be less than 1024 (MAXPATHLEN) characters.
.IP
If a path name begins with a slash, the path search begins at the
.I root
directory.
Otherwise, the search begins from the current working directory.
A slash by itself names the root directory.  A null
pathname refers to the current directory.
.TP 5
Directory
.br
A directory is a special type of file that contains entries
that are references to other files.
Directory entries are called links.  By convention, a directory
contains at least two links, . and .., referred to as
.I dot
and
.I dot-dot
respectively.  Dot refers to the directory itself and
dot-dot refers to its parent directory.
.TP 5
Root Directory and Current Working Directory
.br
Each process has associated with it a concept of a root directory
and a current working directory for the purpose of resolving path
name searches.  A process's root directory need not be the root
directory of the root file system.
.TP 5
File Access Permissions
.br
Every file in the file system has a set of access permissions.
These permissions are used in determining whether a process
may perform a requested operation on the file (such as opening
a file for writing).  Access permissions are established at the
time a file is created.  They may be changed at some later time
through the 
.IR chmod (2)
call. 
.IP
File access is broken down according to whether a file may be: read,
written, or executed.  Directory files use the execute
permission to control if the directory may be searched. 
.IP
File access permissions are interpreted by the system as
they apply to three different classes of users: the owner
of the file, those users in the file's group, anyone else.
Every file has an independent set of access permissions for
each of these classes.  When an access check is made, the system
decides if permission should be granted by checking the access
information applicable to the caller.
.IP
Read, write, and execute/search permissions on
a file are granted to a process if:
.IP
The process's effective user ID is that of the super-user.
.IP
The process's effective user ID matches the user ID of the owner
of the file and the owner permissions allow the access.
.IP
The process's effective user ID does not match the user ID of the
owner of the file, and either the process's effective
group ID matches the group ID
of the file, or the group ID of the file is in
the process's group access list,
and the group permissions allow the access.
.IP
Neither the effective user ID nor effective group ID
and group access list of the process
match the corresponding user ID and group ID of the file,
but the permissions for ``other users'' allow access.
.IP
Otherwise, permission is denied.
.TP 5
Sockets and Address Families
.IP
A socket is an endpoint for communication between processes.
Each socket has queues for sending and receiving data.
.IP
Sockets are typed according to their communications properties.
These properties include whether messages sent and received
at a socket require the name of the partner, whether communication
is reliable, the format used in naming message recipients, etc.
.IP
Each instance of the system supports some
collection of socket types; consult
.IR socket (2)
for more information about the types available and
their properties.
.IP
Each instance of the system supports some number of sets of
communications protocols.  Each protocol set supports addresses
of a certain format.  An Address Family is the set of addresses
for a specific group of protocols.  Each socket has an address
chosen from the address family in which the socket was created.
.SH SEE ALSO
intro(3), perror(3)
