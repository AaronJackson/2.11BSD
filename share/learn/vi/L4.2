#print
		More Movement - Search in the Line

   Frequently one would like to be able to say, "Move the cursor over to
the character 'x'", for some x.  This would be nicer than having to hit the
space bar a jillion times or even than using the word commands.  Vi provides
such a facility in the 'find' commands.

   To move the cursor to the next 'x' on the current line, type 'fx'.  This
'finds' the next 'x'.  If there isn't one, vi will beep at you.  To move in
the other direction (i.e. to find the previous 'x' on this line), type 'Fx'.
Since you frequently find that the one it moved to wasn't the one you wanted,
just one that you didn't see, vi provides an easy way to repeat the search, by
using the ';' key.  To repeat it but in the opposite direction, use ','.

   Variants of this command which will, for a time, appear to be almost
useless are the 't' and 'T' commands, which work exactly like the 'f' and 'F'
commands but stop one character short of the destination, going up 'to' the
character you're searching for but not on it.  We'll see why this command
exists when you look at the concept of 'targets' for commands.

   Type 'ready' to try out the inline searching facilities.
#user
#create Inline
The inline searching commands are as follows:
	fx = Find next 'x' on current line, for any 'x'.
	Fx = Find previous 'x' on current line, for any 'x'.
        tx = Like 'fx' but stops one character short
	Tx = Like 'Fx' but stops one character short
	 ; = Repeat previous inline search
	 , = Repeat previous inline search but in opposite direction

The ';' and ',' commands unfortunately seem to have utterly un-mnemonic names.
They were chosen, however, because of their convenient placement on most
keyboards.
#
vi Inline
#next
4.3  10
